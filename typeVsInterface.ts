// 1) Нельзя использовать одно имя для нескольких типов. Другими словами, нельзя расширить тип,
// а вот интерфейс можно
// ( и это может быть удобно, если нужно расширить интерфейс сторонней библиотеки).

type Box = {
    x: number;
}

// выбивает ошибку -
type Box = {
    y: number;
}

// interface Box {
//     x: number;
// }
//
// // не выбивает ошибку -
// interface Box {
//     y: number;
// }

//2) нельзя имплементироваться от типа если используется union
//
type Shape = {
    v: string;
}

type Figure = {
    z: number;
}

type Box = Shape | Figure;

// type Box = Shape;
class MyBox implements Box {
    v: string;
}

// 3)если требуется примитива или юниона примитива - то это type, interface такого не позволяет.
// interface это только про объекты классы и т д.

// 4) рекомендация от создателя курса достаточно странная, но интересная.
// Он за то чтобы если используется объект - то описывать всегда интерфейсом,
// если примитив - то ясно дело типом.
/**
 * Почему если объект то описываем интерфейсом по мнению автора курса?
 * 1) чаще класс имплементируется от интерфейса, чем от типа. Раньше в ts вообще нельзя было
 * классу имплементироваться от типа, а сейчас например невозможно имплементироваться от юниона.
 *
 * 2) интерфейсы удобно расширять за пределами библиотеки.
 *
 * Все это спорно и холиварно. Например Сергей удивился почему везде одни интерфейсы на брегисе.
 *
 * Интерфейс — это абстрактный тип, который сообщает компилятору, какие имена свойств может иметь данный объект.
 * TypeScript создает неявные интерфейсы, когда вы определяете объект со свойствами.
 *
 * Alias - это Псевдоним типа позволяет вам указать новое имя для существующего типа данных в вашей программе.
 * Псевдоним типа не создает новые типы. Они просто предоставляют новое имя существующему типу.
 */